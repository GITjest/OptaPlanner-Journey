import org.optaplanner.core.api.score.buildin.hardsoftdouble.HardSoftDoubleScoreHolder;
import journey.domain.JourneySolution;
import journey.domain.Offer;
import journey.domain.JourneyStage;
global HardSoftDoubleScoreHolder scoreHolder;

rule "(o.[4].i.[1] == 0) - HARD"
when
   $object1 : Offer(journeyStageId == 4, integers[1] == 0)
   JourneyStage(id == 4, offer == $object1)
then
   scoreHolder.addHardConstraintMatch(kcontext, 1);
end

rule "(o.[0].i.[0] == 0) - HARD"
when
   $object1 : Offer(journeyStageId == 0, integers[0] == 0)
   JourneyStage(id == 0, offer == $object1)
then
   scoreHolder.addHardConstraintMatch(kcontext, 1);
end

rule "(o.[0].i.[2] >= 0) - HARD"
when
   $object1 : Offer(journeyStageId == 0, integers[2] >= 0)
   JourneyStage(id == 0, offer == $object1)
then
   scoreHolder.addHardConstraintMatch(kcontext, 1);
end

rule "(o.[4].i.[3] <= 20) - HARD"
when
   $object1 : Offer(journeyStageId == 4, integers[3] <= 20)
   JourneyStage(id == 4, offer == $object1)
then
   scoreHolder.addHardConstraintMatch(kcontext, 1);
end

rule "(o.[0].i.[1] == o.[1].i.[3]) - HARD"
when
   $object1 : Offer(journeyStageId == 0, $value1 : integers[1])
   $object2 : Offer(journeyStageId == 1, $value1 == integers[3])
   JourneyStage(id == 0, offer == $object1)
   JourneyStage(id == 1, offer == $object2)
then
   scoreHolder.addHardConstraintMatch(kcontext, 1);
end

rule "(o.[2].i.[1] == o.[3].i.[3]) - HARD"
when
   $object1 : Offer(journeyStageId == 2, $value1 : integers[1])
   $object2 : Offer(journeyStageId == 3, $value1 == integers[3])
   JourneyStage(id == 2, offer == $object1)
   JourneyStage(id == 3, offer == $object2)
then
   scoreHolder.addHardConstraintMatch(kcontext, 1);
end

rule "(o.[2].i.[0] == o.[1].i.[3]) - HARD"
when
   $object1 : Offer(journeyStageId == 2, $value1 : integers[0])
   $object2 : Offer(journeyStageId == 1, $value1 == integers[3])
   JourneyStage(id == 2, offer == $object1)
   JourneyStage(id == 1, offer == $object2)
then
   scoreHolder.addHardConstraintMatch(kcontext, 1);
end

rule "(o.[4].i.[0] == o.[3].i.[3]) - HARD"
when
   $object1 : Offer(journeyStageId == 4, $value1 : integers[0])
   $object2 : Offer(journeyStageId == 3, $value1 == integers[3])
   JourneyStage(id == 4, offer == $object1)
   JourneyStage(id == 3, offer == $object2)
then
   scoreHolder.addHardConstraintMatch(kcontext, 1);
end

rule "(o.[1].i.[3] != o.[3].i.[3]) - HARD"
when
   $object1 : Offer(journeyStageId == 1, $value1 : integers[3])
   $object2 : Offer(journeyStageId == 3, $value1 != integers[3])
   JourneyStage(id == 1, offer == $object1)
   JourneyStage(id == 3, offer == $object2)
then
   scoreHolder.addHardConstraintMatch(kcontext, 1);
end

rule "(o.[0].i.[3] <= o.[1].i.[1]) - HARD"
when
   $object1 : Offer(journeyStageId == 0, $value1 : integers[3])
   $object2 : Offer(journeyStageId == 1, $value1 <= integers[1])
   JourneyStage(id == 0, offer == $object1)
   JourneyStage(id == 1, offer == $object2)
then
   scoreHolder.addHardConstraintMatch(kcontext, 1);
end

rule "(o.[2].i.[3] <= o.[3].i.[1]) - HARD"
when
   $object1 : Offer(journeyStageId == 2, $value1 : integers[3])
   $object2 : Offer(journeyStageId == 3, $value1 <= integers[1])
   JourneyStage(id == 2, offer == $object1)
   JourneyStage(id == 3, offer == $object2)
then
   scoreHolder.addHardConstraintMatch(kcontext, 1);
end

rule "(o.[2].i.[2] >= o.[1].i.[2]) - HARD"
when
   $object1 : Offer(journeyStageId == 2, $value1 : integers[2])
   $object2 : Offer(journeyStageId == 1, $value1 >= integers[2])
   JourneyStage(id == 2, offer == $object1)
   JourneyStage(id == 1, offer == $object2)
then
   scoreHolder.addHardConstraintMatch(kcontext, 1);
end

rule "(o.[4].i.[2] >= o.[3].i.[2]) - HARD"
when
   $object1 : Offer(journeyStageId == 4, $value1 : integers[2])
   $object2 : Offer(journeyStageId == 3, $value1 >= integers[2])
   JourneyStage(id == 4, offer == $object1)
   JourneyStage(id == 3, offer == $object2)
then
   scoreHolder.addHardConstraintMatch(kcontext, 1);
end

rule "(o.[1].i.[2] - o.[1].i.[1]) - SOFT"
when
   $object1 : Offer(journeyStageId == 1, $value1 : integers[2], $value2 : integers[1])
   JourneyStage(id == 1, offer == $object1)
then
   scoreHolder.addSoftConstraintMatch(kcontext, (10.0 * ($value1 - $value2)));
end

rule "(o.[3].i.[2] - o.[3].i.[1]) - SOFT"
when
   $object1 : Offer(journeyStageId == 3, $value1 : integers[2], $value2 : integers[1])
   JourneyStage(id == 3, offer == $object1)
then
   scoreHolder.addSoftConstraintMatch(kcontext, (10.0 * ($value1 - $value2)));
end

rule "(o.[0].i.[3] - o.[0].i.[2]) - SOFT"
when
   $object1 : Offer(journeyStageId == 0, $value1 : integers[3], $value2 : integers[2])
   JourneyStage(id == 0, offer == $object1)
then
   scoreHolder.addSoftConstraintMatch(kcontext, (-10.0 * ($value1 - $value2)));
end

rule "(o.[2].i.[3] - o.[2].i.[2]) - SOFT"
when
   $object1 : Offer(journeyStageId == 2, $value1 : integers[3], $value2 : integers[2])
   JourneyStage(id == 2, offer == $object1)
then
   scoreHolder.addSoftConstraintMatch(kcontext, (-10.0 * ($value1 - $value2)));
end

rule "(o.[4].i.[3] - o.[4].i.[2]) - SOFT"
when
   $object1 : Offer(journeyStageId == 4, $value1 : integers[3], $value2 : integers[2])
   JourneyStage(id == 4, offer == $object1)
then
   scoreHolder.addSoftConstraintMatch(kcontext, (-10.0 * ($value1 - $value2)));
end

rule "o.[3].i.[0] - SOFT"
when
   $object1 : Offer(journeyStageId == 3, $value1 : integers[0])
   JourneyStage(id == 3, offer == $object1)
then
   scoreHolder.addSoftConstraintMatch(kcontext, (-0.01 * $value1));
end

rule "o.[2].i.[4] - SOFT"
when
   $object1 : Offer(journeyStageId == 2, $value1 : integers[4])
   JourneyStage(id == 2, offer == $object1)
then
   scoreHolder.addSoftConstraintMatch(kcontext, (-0.01 * $value1));
end

rule "o.[0].i.[4] - SOFT"
when
   $object1 : Offer(journeyStageId == 0, $value1 : integers[4])
   JourneyStage(id == 0, offer == $object1)
then
   scoreHolder.addSoftConstraintMatch(kcontext, (-0.01 * $value1));
end

rule "o.[1].i.[0] - SOFT"
when
   $object1 : Offer(journeyStageId == 1, $value1 : integers[0])
   JourneyStage(id == 1, offer == $object1)
then
   scoreHolder.addSoftConstraintMatch(kcontext, (-0.01 * $value1));
end

rule "o.[4].i.[4] - SOFT"
when
   $object1 : Offer(journeyStageId == 4, $value1 : integers[4])
   JourneyStage(id == 4, offer == $object1)
then
   scoreHolder.addSoftConstraintMatch(kcontext, (-0.01 * $value1));
end

rule "o.[3].r.[0] - SOFT"
when
   $object1 : Offer(journeyStageId == 3, $value1 : reals[0])
   JourneyStage(id == 3, offer == $object1)
then
   scoreHolder.addSoftConstraintMatch(kcontext, (1.0 * $value1));
end

rule "o.[1].r.[0] - SOFT"
when
   $object1 : Offer(journeyStageId == 1, $value1 : reals[0])
   JourneyStage(id == 1, offer == $object1)
then
   scoreHolder.addSoftConstraintMatch(kcontext, (1.0 * $value1));
end
